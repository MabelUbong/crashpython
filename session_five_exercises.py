# -*- coding: utf-8 -*-
"""session_five_exercises.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/warwickdatascience/beginners-python/blob/master/session_five/session_five_exercises.ipynb

<a href="https://colab.research.google.com/github/warwickdatascience/beginners-python/blob/master/session_five/session_five_exercises.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

<center>Spotted a mistake? Report it <a href="https://github.com/warwickdatascience/beginners-python/issues/new">here</a></center>

# Beginner's Python—Session Five Homework Exercises

## Looping Through a Range

Use a for loop with two arguments to print the first 10 multiples of 12
"""

for i in range(0,11):
  print(i*12)

"""Convert the following while loop into a for loop"""

i = 5
while i < 10:
    print(i)
    i += 1

for i in range(4,9):
  i+=1
  print(i)

"""Loop through the first 100 integers, printing each number if and only if they are a multiple of 13 (remember use `%` for calculating a remainder—a number is divisable by $n$ whenever the remainder when dividing by $n$ is zero)"""

for n in range(1,101):
 if n % 13 == 0:
  print(n)

"""What happens when you reverse the order of the two parameters in range so that the largest comes first?"""

for n in range(101,1):
 if n % 13 == 0:
  print(n)

"""Nothing, the loop never starts.

How many numbers less than 1000 are multiples of one of 3 or 5? Use a for loop along with a variable `count`, initially set to zero, to find out
"""

count = 0
for n in range(1,1000):
  if n % 3 == 0 or n % 5 == 0:
    count +=1
print(count)

"""Ask the user for an integer greater than one (remember to convert this to an integer). Print whether or not it is prime using the following (admittedly inefficient) approach:
* Create a variable `prime`, initial set to `True`
* Loop through the numbers 2 to one less than the user's input
* For each number, check if this divides the user's input. If so, set `prime` to `False`
* After the loop, print whether the number is prime or not using an if statement
"""

question = int (input("Input a number greater than one. "))
prime = True
for i in range(2, question - 1):
 if question % i == 0:
   prime = False
if prime:
  print("The number is prime.")
else:
  print("The number is not prime.")

"""## Looping Through a List

Create a list of words and loop through it. If a word is less than 6 letters, print '{word} is a short word' otherwise print '{word} is a long word', replacing '{word}' with the corresponding word
"""

words = ['Cat', 'Dog', 'Goldfish', 'Hamster', 'Bunny']
for index in words:
  if len(index) < 6:
    print(index, "is a short word.")
  else:
    print(index, "is a long word.")

"""Loop through the following list, only printing animals that begin with the letter 'a' (remember you can access the letters of a string in the same way that you'd access the elements of a list)"""

animals = ['anteater', 'bear', 'armadillo', 
           'cougar', 'aardvark', 'dear']

for a in animals:
  if a[0] =='a':
    print(a)

"""Create a list of numbers. Use a for list to create a new list which only contains the even numbers of the original (hint: you can use `.append()`)"""

nums = [1,2,3,4,5,6,7,8,9,10]
even_nums = []
for n in nums:
  if n % 2 == 0:
       even_nums.append(n)
print(even_nums)

"""Without using `max()`, calculate the maximum number in a list. You can do this by using a variable `current_max` (initially set to the first value in the list) to keep track of the current largest value, updating whenever a larger value is found."""

numbers = [1,4,56,7,89,12,55]
current_max = numbers[0]
for i in numbers:
  if i > current_max:
      current_max = i
print(current_max, "is the maximum of the list.")

"""## Early-stopping

Loop through and print the numbers 3 to 7, skipping the number 4 using a `continue` statement
"""

for num in range(3,8):
  if num==4:
     continue
  print(num)

"""Loop through the following list, converting each value to an integer and appending it to a new list called `int_list`. Before converting, test if the value is numeric using `value.isnumeric()`. If this is not true, print an error message and break. Check the value of `int_list` after to ensure that is was only converted up to the point of the error."""

str_list = ['3', '6', '4', 'five', '2']

int_list = []
for s in str_list:
    if not s.isnumeric():
       print("The value is numeric.")
       break
    int_list.append(int(s))
print(int_list)

"""Replace the condition in the while loop with `True` and instead use a `break` statement inside of an if statement to end the loop

Take the primality test we wrote earlier and make it more efficient by breaking whenever a divisor is found
"""

i = 4
while i <= 8:
    print(i)
    i += 1

question = int (input("Input a number greater than one. "))
prime = True
for i in range(2, question - 1):
 if question % i == 0:
   prime = False
   break
if prime:
  print("The number is prime.")
else:
  print("The number is not prime.")

"""## Enumeration

Create a list of positive and negative numbers. Loop through the list using enumeration and replace and negative numbers with zero. (Hint: use something similar to `numbers[index] = 0`)
"""

numbers = [1,-3,-5,
           5,-9,-7,3]
for i, n in enumerate(numbers):
  if n < 0:
     numbers[i] = 0
print(numbers)

"""Create a list of numbers an print out the square of every second number"""

numberz = [3,7,9,5,4,6]
for i, n in enumerate(numberz):
  if i % 2 == 1:
      print(n*n)

"""Enumerate allows for a second optional argument. What does this do? Read the docs:
https://book.pythontips.com/en/latest/enumerate.html

Tells you where to start

Use this second argument to rewrite the last example in the session five presentation, without using `index + 1`
"""

calander = ['meeting', 'break', 'lunch', 'research']
print("Today's schedule")
for index, item in enumerate(calander, 1):
    print(str(index) + ')', item)

"""The alternating sum of the list `[a, b, c, d, ...]` is `a - b + c - d + ...`. Create a list of numbers and find its alternating sum. You will need to use a variable (say, `running_alt_sum`) to keep track of the alterating sum as you loop through the list. (Hint: `(-1) ** i` is `1` if i is even, and `-1` if i is odd—alternatively, you can use an if statement looking at whether `i` is odd)"""

new_list = [1,2,3,4,5,6]
running_alt_sum = 0
for i,n in enumerate(new_list):
  running_alt_sum +=(-1)**i*n
print(running_alt_sum)