# -*- coding: utf-8 -*-
"""session_three_exercises.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/warwickdatascience/beginners-python/blob/master/session_three/session_three_exercises.ipynb

<a href="https://colab.research.google.com/github/warwickdatascience/beginners-python/blob/master/session_three/session_three_exercises.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

<center>Spotted a mistake? Report it <a href="https://github.com/warwickdatascience/beginners-python/issues/new">here</a></center>

# Beginner's Pythonâ€”Session Three Homework Exercises

## Comparisons and Boolean Arithmetic

Confirm that applying `or` to two `True` values does indeed return `True`
"""

3 < 5 or 6 > 9

"""_Note: Creating interesting questions for Boolean variables is difficult since there's not much to them, and so the following questions are a bit more abstract in nature. The first gives a useful application of comparisons for data analysis, and the second offers a way of dealing with the shortcomings of how computers store numbers. Feel free to skip to the next section if you only want to know the bare bones of Python._

Create a list of seven numbers called `nums` and find their mean (sum divided by length), saving this in the variable `mean`
"""

nums = [1,2,3,3,5,6,7]
total = sum(nums)
mean = total/len(nums)
print("The mean of the list of seven numbers is", mean)

"""Run the code below which will calculate the median value of the list (the middle value of the list when they are placed in order)"""

median = sorted(nums)[3]
print( median)

"""Use a Boolean expression to see which of the mean and median is larger"""

mean > median

"""A rule-of-thumb for estimating how skewed a collection of numbers is to compare the mean and the median. When the mean is larger than the median then your data is likely positively skewed. For the reverse, a negative skew is more likely. Is your data more positively or negatively skewed?

![Skewness](https://upload.wikimedia.org/wikipedia/commons/f/f8/Negative_and_positive_skew_diagrams_%28English%29.svg)

My data is positively skewed

Computers are not able to store decimal numbers with an infinite number of decimal places. This means that as we manipulate decimal numbers, small rounding errors can occur. For example:
"""

print(1 / 49 * 49)
print(1 / 49 * 49 == 1)

"""This can be incredibly annoying. We know $\frac{1}{49} \times 49$ and $1$ are the same thing yet "computer says no". We can get around this by checking that two numbers are near each other, rather than exactly equal. We typically do this by taking the difference of two numbers, making this difference positive using the `abs()` function, and then checking that this postive difference is less than some small tolerance that we set. To warm up, start my using `abs()` on the numbers $1$ and $-1$ to see that it does indeed make any value you pass into it positive"""

print(abs(1))
print(abs(-1))

"""Now, use the tolerance defined below to check if $\frac{1}{49}\times 49$ and $1$ are indeed the same value (within said tolerance)"""

tolerance = 10 ** (-8)  # 0.000000001 - i.e. very small tolerance

difference = 1 - (1/49)*49
print( "The difference between the values is ", difference)
difference < tolerance

"""## Control Flow

Ask for user input. If it lies between 8 and 12, print "Approximately 10" (if you want to show off, you can do this with one condition using `abs()`)
"""

num = int ( input("Pick a number between 1 and 15. "))
if 8 < num < 12:
  print("Approximatley 10")

"""Ask the user whether it will rain, requesting that they answer either "yes" or "no". If their answer is "yes" print "Better bring an umbrella", and if it's no print "That's great to hear". If they answer anything but these two options, print "I don't understand""""

weather = input("Will it rain? (Please write yes or no). ")
if weather == "yes":
  print( "Better bring an umbrella")
elif weather == "no":
  print("That's great to hear")
else:
  print("I don't understand")

"""Use `or` twice to check whether a number inputted by the user is one of $6$, $28$, or $496$. If it is, print "Perfect...""""

checking = int (input("Write a number. "))
if checking == 6 or checking == 28 or  checking == 496:
  print("Perfect!")

"""Python has a useful command `in`, which lets you check if a value is in a list. For example, `5 in [4, 5, 6]` will return `True`. Use this to simplify the previous solution"""

checking1 = int(input("Write a number. "))
if checking1 in [6,28,496]:
  print("Perfect")

"""Ask the user for a number and store this as a float called `num`. Check whether the number could be stored as an integer by seeing if `num` and `int(num)` have the same value. If so, convert `num` to an integer type. (Recall: running `int()` on a decimal number will round it down to the nearest integer)"""

num = float (input("Write a number: "))
if num == int (num):
  num = int (num)
print(type(num))

"""## While Loops

Print the first ten squared numbers (you can either times a number by itself to get a square or use `x ** 2`)
"""

x=0
while x < 10:
  x += 1
  print(x**2)

"""Define a string `password` containing a password (not a real one, obviously!). Use a while loop to allow a user, 3 guesses at this password. You might want to keep the number of guesses in a variable called `guesses`, initial set to $0$. You can also use a variable `correct` to keep track of whether they guessed correctly. This should most likely default to `False` and then get set to `True` if they guess correctly"""

password = "kittenlove17"
guesses = 0
correct = False
while guesses < 3 and not correct:
    guess = input("What is the password? ")
    if guess == password:
        correct = True
    else:
        guesses = guesses + 1

if correct:
    print("Access granted")
else:
    print("Denied")

"""The game FizzBuzz goes as follows:

* Count up from one
* Replace each multiple of 3 with the word "Fizz"
* Replace each multiple of 5 with the word "Buzz"
* Replace each multiple of 15 with the word "FizzBuzz"
* Otherwise, print the number

For example, the sequence begins:

```
1
2
Fizz
4
Buzz
Fizz
7
...
14
FizzBuzz
16
...
```

Ask for a user inputted number and place FizzBuzz up to that number. Note you can check if `x` is divible by `y` using `x % y == 0`. For example `5 % 2 == 0` is `False` but `9 % 3` is `True`
"""

game = int(input("Play FizzBuzz until: "))
y = 1
while y <= final_number:
    if y % 15 == 0:
        print("FizzBuzz")
    elif y % 5 == 0:
        print("Buzz")
    elif y % 3 == 0:
        print("Fizz")
    else:
        print(y)
    y = y + 1

"""The Collatz conjecture goes as follows

> Take a number $n$. If it is even, halve it, if it is odd, times it by $3$ and add $1$. Repeat this process. You will eventually reach the number $1$

We have not proved that this is definitely true but we have good reason to believe it is. You Python to take any starting number and print out the sequence of numbers generated by the Collatz conjecture, stopping when you reach one
"""

n = int (input("Pick a number: "))
while n != 1:
    print(n)
    if n % 2 ==0:
        n= n//2
    else:
      n= n*3+1
print(n)

"""What is the first power of two to surpass one million? Use a while loop to find out (Hint: start with a variable `n = 1` and set `n = n * 2` at each iteration, stopping when this goes above one million)"""

n=1
while n <1000000:
  n= n*2
print(n)