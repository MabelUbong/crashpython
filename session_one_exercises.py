# -*- coding: utf-8 -*-
"""session_one_exercises.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/warwickdatascience/beginners-python/blob/master/session_one/session_one_exercises.ipynb

<a href="https://colab.research.google.com/github/warwickdatascience/beginners-python/blob/master/session_one/session_one_exercises.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

<center>Spotted a mistake? Report it <a href="https://github.com/warwickdatascience/beginners-python/issues/new">here</a></center>

# Beginner's Pythonâ€”Session One Homework Exercises

## Using Google Colab

Whenever you write a `#` in your code, Python will ignore the rest of the line. This lets us write comments to document our code. Print the phrase `"Hello World"` and end the line with the comment: 

`# see https://en.wikipedia.org/wiki/%22Hello,_World!%22_program`
"""



"""## Printing and Arithmetic

What is the difference between $5423$ and $2683$? Use Python to find out (hint: use `-` for subtraction)
"""

print(5423 - 2683)

"""Suppose I have 2000ml of solvent and I need to divide this evenly into 17 test tubes. Roughly how many millilitres should be added to each test tube. Use Python to find out"""

print(int (2000/17))

"""Print a maths equation followed by the solution. For example `54 * 93 + 4 = 5026`. Do this using print with two inputs. The first input should be the left-hand side of the equation and the equals sign, as a string, and the second should be a mathematical expression for Python to evaluate to give the answer"""

print( "3*4 + 10 =", 3*4+10)

"""Does Python obey the order of operations (you might know this as BIDMAS, BODMAS or PEMDAS)? Try evaluating a few expressions to see"""

print(10*10+2)
print((10+10)*2)

"""This is true

By default, `print()` separates your arguments by spaces. You can change this by adding a named input called `sep` somewher in your inputs (though we usually put it at the end). For example:
"""

print("15", "46", "23", "70", sep = " -> ")

"""Use an empty string (`""`) as your separating character to combine all the numbers above into one long number"""

print("15", "46", "23", "70", sep = "")

"""## Variables

Create one variable containing your house number and other containing the number of pets you own. Add these variables together and print the result
"""

house_number = 49
number_of_pets = 0
print(house_number + number_of_pets)

"""Run the following two cells in reverse order, then the third. What value do you expect to be printed?"""

# run me second
x = 2

# run me first
x = 1

# run me last
print(x)

"""x = 2 shoul be printed first as it is the last assinged value that has been run

Create 3 variables storing the number of chickens, cows, and pigs you have on an imaginary farm
"""

numchick = 10
numcows = 5
numpigs = 7

"""Use these variables to print how many total legs there are on the farm (including yours!)"""

total_number_of_legs = print(numchick*2 + numcows*4 + numpigs*4 + 2)

"""Create a variable, `pi`, with value $3.14$ and another, `radius`, equal to $5$. Use these to calculate the circumference and area of a circle with radius `radius` and print these out in a sentence. As a reminder, the corresponding formulae are below.

$$\text{circumference} = 2 \times \pi \times \text{radius}$$
$$\text{area} = \pi \times \text{radius}^2 = \pi \times \text{radius} \times \text{radius}$$
"""

pi = 3.14
radius = 5

circum = print(2*pi*radius)
area = print(pi*radius**2)

"""You will notice that the circumference has a slight rounding error. This due to the way that python stores floating point numbers (decimals). Fix this by using the `round()` function to round both answers to two decimal places. As an example, `round(my_number, 3)` will round `my_number` to 3 decimal places."""

new_circum = round(2*pi*radius, 2)
new_area = round(pi*radius**2, 2)
print(new_circum)
print(new_area)

"""## Variable Types

What is the type of the result of adding an integer to a float?
"""

x = 1+1.2
print(x)
print(type(x))

"""You get a float

Whenever we divide one number by another using `/`, even if the result is a whole number, the resulting type will be a float. Confirm this by creating a variable with value `4 / 2` and checking its type
"""

y = 4/2
print(y)
print(type(y))

"""The reason Python does this is for consistency. It can be a pain though since the output will print with a `.0` at the end. You can get around this problem by converting to an integer. Take the variable above and convert it to an integer using `int()`, overwriting its current value. Print the result"""

y=int(y)
print(type(y))